name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main", "developer" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 3. Docker 로그인
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Docker 빌드 & 푸시 (개발 환경)
      - name: Docker build & push to dev
        if: contains(github.ref, 'developer')
        run: |
          docker build -f planit/Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-dev planit
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev

      # 5. Docker 빌드 & 푸시 (프로덕션 환경)
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker build -f planit/Dockerfile-prod -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod planit
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod

      # 6. 배포 (개발 환경)
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        if: contains(github.ref, 'developer')
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
            sudo docker run -d -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
            sudo docker image prune -f

      # 7. 배포 (프로덕션 환경)
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
            sudo docker run -d -p 8082:8082 ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
            sudo docker image prune -f
