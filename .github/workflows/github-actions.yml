# GitHub Repository Actions 페이지에 나타날 이름
name: CI/CD using GitHub Actions & Docker

# 이벤트 트리거: main이나 developer 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main", "developer" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 캐싱 - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. 환경별 YML 파일 생성 - application.yml
      - name: Create application.yml
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'developer')
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.YML }}" > ./src/main/resources/application.yml
        shell: bash

      # 5. JWT Secret 추가
      - name: Set JWT Secret
        run: |
          echo "jwt.secret=${{ secrets.JWT_SECRET }}" >> ./src/main/resources/application.yml
        shell: bash

      # 6. 환경별 YML 파일 생성 - application-dev.yml
      - name: Create application-dev.yml
        if: contains(github.ref, 'developer')
        run: |
          echo "${{ secrets.YML_DEV }}" > ./src/main/resources/application-dev.yml
        shell: bash

      # 7. 환경별 YML 파일 생성 - application-prod.yml
      - name: Create application-prod.yml
        if: contains(github.ref, 'main')
        run: |
          echo "${{ secrets.YML_PROD }}" > ./src/main/resources/application-prod.yml
        shell: bash

      # 8. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 9. Docker 로그인
      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # 10. Docker 빌드 & 푸시 (프로덕션)
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod

      # 11. Docker 빌드 & 푸시 (개발)
      - name: Docker build & push to dev
        if: contains(github.ref, 'developer')
        run: |
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-dev .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev

      # 12. 프로덕션 배포
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
            sudo docker run -d -p 8082:8082 ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
            sudo docker image prune -f

      # 13. 개발 환경 배포
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        if: contains(github.ref, 'developer')
        with:
          host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.USERNAME }} # 예: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
            sudo docker run -d -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
            sudo docker image prune -f
